generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  password     String
  email        String?       @unique
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  automations  Automation[]
  integrations Integration[]
  Subscription Subscription?
}

model Subscription {
  id         String            @id @default(uuid())
  userId     String?           @unique
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")
  customerId String?           @unique @map("customer_id")
  plan       SUBSCRIPTION_PLAN @default(FREE)
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Automation {
  id            String     @id @default(uuid())
  name          String     @default("Untitled")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  active        Boolean    @default(false)
  userId        String?
  integrationId String?
  User          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Integration   Integration? @relation(fields: [integrationId], references: [id])
  dms           Dms[]
  keywords      Keywords[]
  listener      Listener[]
  posts         Post[]
  trigger       Trigger[]
}

model Integration {
  id          String       @id @default(uuid())
  name        INTEGRATIONS @default(INSTAGRAM)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  userId      String?
  token       String       @unique
  expiresAt   DateTime     @map("expires_at")
  instagramId String?      @map("instgramId") // Keep the database column name for compatibility
  pageId      String?
  pageName    String?
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  automations Automation[]
}

model Dms {
  id           String      @id @default(uuid())
  automationId String?
  senderId     String?
  reciever     String?
  message      String?
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

model Post {
  id           String      @id @default(uuid())
  automationId String?
  postId       String?
  mediaType    MEDIATYPE   @default(IMAGE)
  mediaUrl     String?
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

model Trigger {
  id           String      @id @default(uuid())
  automationId String?
  type         String?
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

model Keywords {
  id           String      @id @default(uuid())
  automationId String?
  word         String
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

model Listener {
  id           String      @id @default(uuid())
  automationId String?
  type         LISTENER
  dmCount      Int         @default(0)
  commentCount Int         @default(0)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum SUBSCRIPTION_PLAN {
  FREE
  PRO
}

enum LISTENER {
  SMARTAI
  MESSAGE
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROUSEL_ALBUM
}
