// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  password     String
  email        String?       @unique
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  Subscription Subscription?
  automations  Automation[]
  integrations Integration[]
}

model Subscription {
  id         String            @id @default(uuid())
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?           @unique
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")
  customerId String?           @unique @map("customer_id")
  plan       SUBSCRIPTION_PLAN @default(FREE)
}

model Automation {
  id        String     @id @default(uuid())
  name      String     @default("Untitled")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  active    Boolean    @default(false)
  User      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  trigger   Trigger[]
  listener  Listener[]
  posts     Post[]
  dms       Dms[]
  keywords  Keywords[]
}

model Integration {
  id         String       @id @default(uuid())
  name       INTEGRATIONS @default(INSTAGRAM)
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  User       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?      @unique
  token      String       @unique
  expiresAt  DateTime     @map("expires_at")
  instgramId String?
}

model Dms {
  id           String      @id @default(uuid())
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?
  senderId     String?
  reciever     String?
  message      String?
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
}

model Post {
  id           String      @id @default(uuid())
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?
  postId       String?
  mediaType    String?
  mediaUrl     String?
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
}

model Trigger {
  id           String      @id @default(uuid())
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?
  type         String?
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum SUBSCRIPTION_PLAN {
  FREE
  PRO
}

enum LISTENER {
  SMARTAI
  MESSAGE
}
